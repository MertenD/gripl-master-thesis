package de.mertendieckmann.griplbackend.adapter.web

import de.mertendieckmann.griplbackend.model.dto.CreateDatasetRequest
import de.mertendieckmann.griplbackend.model.dto.Dataset
import de.mertendieckmann.griplbackend.repository.DatasetRepository
import io.swagger.v3.oas.annotations.Operation
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.web.bind.annotation.*

@RestController
@CrossOrigin(
    origins = ["\${app.frontend.base-url}"],
    allowCredentials = "true",
    allowedHeaders = ["*"],
    methods = [
        RequestMethod.GET,
        RequestMethod.POST,
        RequestMethod.DELETE,
        RequestMethod.OPTIONS
    ]
)
@RequestMapping("/dataset")
class DatasetController(
    private val datasetRepository: DatasetRepository
) {
    @Operation(
        summary = "Create a new Dataset",
        description = "Creates a new empty dataset entry. The Id will be automatically generated by the database and returned."
    )
    @PostMapping("", produces = [MediaType.APPLICATION_JSON_VALUE])
    fun createDataset(
        @RequestBody request: CreateDatasetRequest
    ): ResponseEntity<Int> {
        val idOfCreatedDataset = datasetRepository.createDataset(request)
        return if (idOfCreatedDataset > 0) {
            ResponseEntity.status(HttpStatus.CREATED).body(idOfCreatedDataset)
        } else {
            ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(-1)
        }
    }

    @Operation(
        summary = "Get all Datasets",
        description = "Returns a list of all available datasets."
    )
    @GetMapping("", produces = [MediaType.APPLICATION_JSON_VALUE])
    fun getAllDatasets(): List<Dataset> {
        return datasetRepository.getAllDatasets()
    }

    @Operation(
        summary = "Delete Dataset",
        description = "Deletes an dataset and set all associated to be not associated anymore."
    )
    @DeleteMapping("/{datasetId}")
    fun deleteDataset(@PathVariable("datasetId") datasetId: Long): ResponseEntity<String> {
        if (datasetRepository.getDatasetById(datasetId) == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No dataset found for Id: $datasetId")
        }
        val affectedRows = datasetRepository.deleteDataset(datasetId)
        return if (affectedRows > 0) {
            ResponseEntity.ok("Dataset deleted successfully")
        } else {
            ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete dataset")
        }
    }
}