package de.mertendieckmann.griplbackend.adapter.web

import de.mertendieckmann.griplbackend.application.PreviewGenerator
import de.mertendieckmann.griplbackend.model.dto.*
import de.mertendieckmann.griplbackend.repository.EvaluationDataRepository
import de.mertendieckmann.griplbackend.repository.PreviewCacheRepository
import io.github.oshai.kotlinlogging.KotlinLogging
import io.swagger.v3.oas.annotations.Operation
import org.springframework.core.io.buffer.DataBufferUtils
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.http.codec.multipart.FilePart
import org.springframework.http.server.reactive.ServerHttpRequest
import org.springframework.web.bind.annotation.*
import org.springframework.web.server.ResponseStatusException
import reactor.core.publisher.Mono

@RestController
@CrossOrigin(
    origins = ["\${app.frontend.base-url}"],
    allowCredentials = "true",
    allowedHeaders = ["*"],
    methods = [
        RequestMethod.GET,
        RequestMethod.POST,
        RequestMethod.DELETE,
        RequestMethod.OPTIONS
    ]
)
@RequestMapping("/dataset/testcase")
class EvaluationDataController(
    private val evaluationDataRepository: EvaluationDataRepository,
    private val previewCacheRepository: PreviewCacheRepository
) {
    private val log = KotlinLogging.logger { }

    @Operation(
        summary = "Get all Testcases Metadata",
        description = "Returns a list of the metadata of all available processes inside the evaluation dataset."
    )
    @GetMapping("", produces = [MediaType.APPLICATION_JSON_VALUE])
    fun getAllBpmnDatasetMeta(): List<EvaluationDataMeta> {
        val datasets = evaluationDataRepository.getAllEvaluationData()
        if (datasets.isEmpty()) {
            throw ResponseStatusException(HttpStatus.NOT_FOUND, "No datasets found")
        }
        return datasets.map { EvaluationDataMeta(it.id, it.name, it.datasetId) }
    }

    @Operation(
        summary = "Insert a new Testcase",
        description = "Inserts a new dataset entry with the provided data. The Id will be automatically generated by the database and returned."
    )
    @PostMapping(
        "",
        consumes = [MediaType.MULTIPART_FORM_DATA_VALUE],
        produces = [MediaType.APPLICATION_JSON_VALUE]
    )
    fun insertBpmnDataset(
        @RequestPart("name") name: String? = null,
        @RequestPart("bpmnFile") bpmnFile: FilePart,
        @RequestPart("expectedValues") expectedValues: List<ExpectedValue>,
        @RequestPart("datasetId") datasetId: String? = null
    ): Mono<ResponseEntity<Int>> {

        val bpmnXmlMono: Mono<String> = DataBufferUtils
            .join(bpmnFile.content())
            .map { dataBuffer ->
                dataBuffer.asInputStream().bufferedReader().use { it.readText() }
            }

        return bpmnXmlMono.flatMap { bpmnXml ->
            val evaluationData = EvaluationDataWithOptionalId(
                name = name,
                bpmnXml = bpmnXml,
                expectedValues = expectedValues,
                datasetId = datasetId?.toLong()
            )

            val idOfCreatedEntry = evaluationDataRepository.insertEvaluationData(evaluationData)

            if (idOfCreatedEntry != null) {
                Mono.just(ResponseEntity.status(HttpStatus.CREATED).body(idOfCreatedEntry))
            } else {
                Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(-1))
            }
        }
    }

    @Operation(
        summary = "Get Testcase by Id",
        description = "Returns the full testcase entry for a specific Id."
    )
    @GetMapping("/{id}", produces = [MediaType.APPLICATION_JSON_VALUE])
    fun getBpmnDataset(@PathVariable("id") id: Long): EvaluationData {
        val datasetEntry = evaluationDataRepository.getEvaluationDataById(id)
            ?: throw ResponseStatusException(HttpStatus.NOT_FOUND, "No dataset entry found for Id: $id")

        return datasetEntry
    }

    @Operation(
        summary = "Update Testcase by Id",
        description = "Updates an existing dataset entry with the provided data."
    )
    @PostMapping(
        "/{id}",
        consumes = [MediaType.MULTIPART_FORM_DATA_VALUE],
        produces = [MediaType.APPLICATION_JSON_VALUE]
    )
    fun updateBpmnDataset(
        @PathVariable("id") id: Long,
        @RequestPart("name") name: String? = null,
        @RequestPart("bpmnFile") bpmnFile: FilePart,
        @RequestPart("expectedValues") expectedValues: List<ExpectedValue>
    ): Mono<ResponseEntity<String>> {
        val existingEntry = evaluationDataRepository.getEvaluationDataById(id)
            ?: return Mono.just(ResponseEntity.status(HttpStatus.NOT_FOUND).body("No dataset entry found for Id: $id"))

        log.info { "Updating existing dataset entry with Id: $id" }

        val bpmnXmlMomo: Mono<String> = DataBufferUtils
            .join(bpmnFile.content())
            .map { dataBuffer ->
                dataBuffer.asInputStream().bufferedReader().use { it.readText() }
            }

        return bpmnXmlMomo.flatMap { bpmnXml ->
            val affectedRows = evaluationDataRepository.updateEvaluationData(EvaluationData(
                id = existingEntry.id,
                name = name,
                bpmnXml = bpmnXml,
                expectedValues = expectedValues
            ))

            if (affectedRows > 0) {
                Mono.just(ResponseEntity.ok("Dataset entry updated successfully"))
            } else {
                Mono.just(ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to update dataset entry"))
            }
        }
    }

    @Operation(
        summary = "Delete Testcase by Id",
        description = "Deletes a specific dataset entry by its Id."
    )
    @DeleteMapping("/{id}")
    fun deleteBpmnDataset(@PathVariable("id") id: Long): ResponseEntity<String> {
        if (evaluationDataRepository.getEvaluationDataById(id) == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("No dataset entry found for Id: $id")
        }

        log.info { "Deleting dataset entry with Id: $id" }

        val affectedRows = evaluationDataRepository.deleteEvaluationData(id)
        return if (affectedRows > 0) {
            ResponseEntity.ok("Dataset entry deleted successfully")
        } else {
            ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Failed to delete dataset entry")
        }
    }

    @Operation(
        summary = "Get SVG Preview of Testcase",
        description = "Generates a SVG preview of the process model for a specific dataset entry by its Id."
    )
    @GetMapping("/{id}/preview", produces = ["image/svg+xml"])
    fun getSvg(
        @PathVariable id: Long,
        @RequestParam correctIds: List<String> = emptyList(),
        @RequestParam falsePositiveIds: List<String> = emptyList(),
        @RequestParam falseNegativeIds: List<String> = emptyList(),
        @RequestParam theme: String = "light",
        request: ServerHttpRequest
    ): ResponseEntity<String> {

        val requestPath = request.uri.path
        val requestQueryWithoutSalt = request.uri.query
            ?.replace(Regex("&salt=[^&]*"), "")
            ?.let { "?$it" }.orEmpty()
        val relativeRequestUrl = "$requestPath$requestQueryWithoutSalt"
        val cachedPreview = previewCacheRepository.getCachedPreview(id, relativeRequestUrl)

        if (cachedPreview != null) {
            log.info { "Returning cached SVG preview for Id: $id" }
            return ResponseEntity.ok()
                .header("Content-Type", "image/svg+xml")
                .body(cachedPreview.svg)
        }

        val previewGenerator = PreviewGenerator()

        val datasetEntry = evaluationDataRepository.getEvaluationDataById(id)
            ?: return ResponseEntity.status(HttpStatus.NOT_FOUND).body("Kein Datensatz gefunden f端r Id: $id")
        val bpmnXml = datasetEntry.bpmnXml

        val svg = try {
            previewGenerator.convertXmlToSvg(bpmnXml, correctIds = correctIds, falsePositiveIds = falsePositiveIds, falseNegativeIds = falseNegativeIds, theme = theme)
        } catch (ex: IllegalArgumentException) {
            log.error(ex) { "Ung端ltiges BPMN XML f端r Id: $id" }
            return ResponseEntity.badRequest().body("Fehler beim Parsen: ${ex.message}")
        } catch (ex: Exception) {
            log.error(ex) { "Fehler beim Generieren des SVG f端r Id: $id" }
            return ResponseEntity.status(500).body("Serverfehler: ${ex.message}")
        }

        previewCacheRepository.insertPreviewCache(PreviewCacheInsert(
            evaluationDataId = id,
            urlCacheKey = relativeRequestUrl,
            svg = svg
        ))

        return ResponseEntity.ok()
            .header("Content-Type", "image/svg+xml")
            .body(svg)
    }
}